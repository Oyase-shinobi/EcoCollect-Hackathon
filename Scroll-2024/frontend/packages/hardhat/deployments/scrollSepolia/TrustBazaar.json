{
  "address": "0xf4381B41D5247D8301bE0e34D8dC3176c04A054B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ArbitratorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "escrowId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "arbitrator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "votedForBuyer",
          "type": "bool"
        }
      ],
      "name": "ArbitratorVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum TrustBazaar.Roles",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "BuyerOrSellerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "escrowId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "complainer",
          "type": "address"
        }
      ],
      "name": "DisputeOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "escrowId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "resolution",
          "type": "string"
        }
      ],
      "name": "DisputeResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "itemName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "onSale",
          "type": "bool"
        }
      ],
      "name": "ProductAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "escrowId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "name": "ProductBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newReputation",
          "type": "int256"
        }
      ],
      "name": "ReputationUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_arbitrator",
          "type": "address"
        }
      ],
      "name": "addArbitrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TrustBazaar.Roles",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "addBuyerOrSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_itemName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "addProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "arbitrationVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "votesForBuyer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesForSeller",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitratorsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_itemName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_claimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiryTime",
          "type": "uint256"
        }
      ],
      "name": "buyProduct",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "escrowId",
          "type": "bytes32"
        }
      ],
      "name": "claimPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "escrows",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "escrowId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "productId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "productName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "productPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "productSeller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "productBuyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "claimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        },
        {
          "internalType": "enum TrustBazaar.Authorization",
          "name": "authorization",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "bought",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "escrowId",
          "type": "bytes32"
        }
      ],
      "name": "getEscrowDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "escrowId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "productId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "productName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "productPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "productSeller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "productBuyer",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "productArbitrators",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "claimTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTime",
              "type": "uint256"
            },
            {
              "internalType": "enum TrustBazaar.Authorization",
              "name": "authorization",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "bought",
              "type": "bool"
            }
          ],
          "internalType": "struct TrustBazaar.EscrowDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minVotesRequired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEscrowId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "escrowId",
          "type": "bytes32"
        }
      ],
      "name": "openDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "productNames",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "itemName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "onSale",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reputation",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "escrowId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "voteForBuyer",
          "type": "bool"
        }
      ],
      "name": "voteOnDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x19387a4725a3177bfd5d23bed3b3a745eaa8b8d58a1e7dd918e750e96e777969",
  "receipt": {
    "to": null,
    "from": "0x40feacdeee6f017fA2Bc1a8FB38b393Cf9022d71",
    "contractAddress": "0xf4381B41D5247D8301bE0e34D8dC3176c04A054B",
    "transactionIndex": 0,
    "gasUsed": "2388518",
    "logsBloom": "0x
    "blockHash": "0x8629e64377ffb4a5185d481899317f32f5de883780deb094cf69eab667548b5a",
    "transactionHash": "0x19387a4725a3177bfd5d23bed3b3a745eaa8b8d58a1e7dd918e750e96e777969",
    "logs": [],
    "blockNumber": 6813647,
    "cumulativeGasUsed": "2388518",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x186a761645f2A264ad0A655Fb632Ca99150803A9",
    "0x40feacdeee6f017fA2Bc1a8FB38b393Cf9022d71",
    "0x5E57e60e5840Ec4493bEEA7D0D913a12e4398921"
  ],
  "numDeployments": 1,
  "solcInputHash": "89c322e0b0fef245c471870acdf38180",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ArbitratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"votedForBuyer\",\"type\":\"bool\"}],\"name\":\"ArbitratorVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TrustBazaar.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"BuyerOrSellerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"complainer\",\"type\":\"address\"}],\"name\":\"DisputeOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"resolution\",\"type\":\"string\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"itemName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"onSale\",\"type\":\"bool\"}],\"name\":\"ProductAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"ProductBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newReputation\",\"type\":\"int256\"}],\"name\":\"ReputationUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arbitrator\",\"type\":\"address\"}],\"name\":\"addArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TrustBazaar.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"addBuyerOrSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_itemName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"arbitrationVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votesForBuyer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesForSeller\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitratorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_itemName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTime\",\"type\":\"uint256\"}],\"name\":\"buyProduct\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"}],\"name\":\"claimPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"escrows\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"productName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"productPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"productSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"productBuyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustBazaar.Authorization\",\"name\":\"authorization\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"bought\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"}],\"name\":\"getEscrowDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"productName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"productPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"productSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"productBuyer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"productArbitrators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustBazaar.Authorization\",\"name\":\"authorization\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"bought\",\"type\":\"bool\"}],\"internalType\":\"struct TrustBazaar.EscrowDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minVotesRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEscrowId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"productNames\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"itemName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"onSale\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reputation\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"voteForBuyer\",\"type\":\"bool\"}],\"name\":\"voteOnDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TrustBazaar.sol\":\"TrustBazaar\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/TrustBazaar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.26;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract TrustBazaar is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // State variables\\n    IERC20 public token;\\n    address private admin;\\n    address payable private receiver;\\n    uint256 public nextEscrowId;\\n    uint256 public sellersCount;\\n    uint256 public buyersCount;\\n    uint256 public arbitratorsCount;\\n    uint256 public minVotesRequired = 3; \\n\\n    // Enums\\n    enum Authorization {\\n        Pending,\\n        Claim,\\n        Cancel,\\n        Disputed\\n    }\\n    enum Roles {\\n        Arbitrator,\\n        Seller,\\n        Buyer\\n    }\\n    enum Listings {\\n        List,\\n        UnList\\n    }\\n\\n    // Structs\\n    struct Product {\\n        bytes32 id;\\n        string itemName;\\n        uint256 price;\\n        address seller;\\n        bool onSale;\\n    }\\n\\n    struct EscrowDetails {\\n        bytes32 escrowId;\\n        bytes32 productId;\\n        string productName;\\n        uint256 productPrice;\\n        address productSeller;\\n        address productBuyer;\\n        address[] productArbitrators;\\n        uint256 claimTime;\\n        uint256 expiryTime;\\n        Authorization authorization;\\n        bool bought;\\n    }\\n\\n    struct ArbitrationVote {\\n        uint256 votesForBuyer;\\n        uint256 votesForSeller;\\n        mapping(address => bool) voted;\\n        bool resolved;\\n    }\\n\\n    // Mappings\\n    mapping(address => uint256) private sellers;\\n    mapping(address => uint256) private buyers;\\n    mapping(address => uint256) private arbitrators;\\n    mapping(bytes32 => Product) public products;\\n    mapping(bytes32 => EscrowDetails) public escrows;\\n    mapping(bytes32 => ArbitrationVote) public arbitrationVotes;\\n    mapping(string => bytes32) public productNames;\\n\\n    mapping(address => int256) public reputation; \\n\\n    modifier OnlyAdmin() {\\n        require(msg.sender == admin, \\\"Only Admin Can Do This\\\");\\n        _;\\n    }\\n\\n    modifier OnlyArbitrators() {\\n        require(arbitrators[msg.sender] != 0, \\\"You Are Not An Arbitrator\\\");\\n        _;\\n    }\\n\\n    modifier OnlySellers() {\\n        require(sellers[msg.sender] != 0, \\\"You Are Not A Seller\\\");\\n        _;\\n    }\\n\\n    modifier OnlyBuyers() {\\n        require(buyers[msg.sender] != 0, \\\"You Are Not A Buyer\\\");\\n        _;\\n    }\\n\\n    // Events\\n    event BuyerOrSellerAdded(address user, Roles role);\\n    event ArbitratorAdded(address user);\\n    event Deposit(address user, uint256 amount);\\n    event ProductAdded(bytes32 id, string itemName, uint256 price, address seller, bool onSale);\\n    event ProductBought(bytes32 escrowId, uint256 price, uint256 claimTime, uint256 expiryTime);\\n    event DisputeOpened(bytes32 escrowId, address complainer);\\n    event ArbitratorVoted(bytes32 escrowId, address arbitrator, bool votedForBuyer);\\n    event DisputeResolved(bytes32 escrowId, address winner, string resolution);\\n    event ReputationUpdated(address user, int256 newReputation);\\n\\n    // Constructor\\n    constructor(address _admin, address _receiver, address tokenAddress) {\\n        admin = _admin;\\n        receiver = payable(_receiver);\\n        token = IERC20(tokenAddress);\\n        buyersCount = 1;\\n        sellersCount = 1;\\n        arbitratorsCount = 1;\\n    }\\n\\n    // Add buyers, sellers, or arbitrators\\n    function addBuyerOrSeller(Roles role) external {\\n        require(\\n            sellers[msg.sender] == 0 && buyers[msg.sender] == 0 && arbitrators[msg.sender] == 0,\\n            \\\"You already have a role\\\"\\n        );\\n\\n        if (role == Roles.Buyer) {\\n            buyers[msg.sender] = buyersCount;\\n            buyersCount++;\\n            reputation[msg.sender] = 0; // Initialize reputation\\n            emit BuyerOrSellerAdded(msg.sender, role);\\n        } else if (role == Roles.Seller) {\\n            sellers[msg.sender] = sellersCount;\\n            sellersCount++;\\n            reputation[msg.sender] = 0; // Initialize reputation\\n            emit BuyerOrSellerAdded(msg.sender, role);\\n        }\\n    }\\n\\n    function addArbitrator(address _arbitrator) external OnlyAdmin{\\n        require(\\n            sellers[_arbitrator] == 0 && buyers[_arbitrator] == 0 && arbitrators[_arbitrator] == 0,\\n            \\\"This address already has a role\\\"\\n        );\\n\\n        arbitrators[_arbitrator] = arbitratorsCount;\\n        arbitratorsCount++;\\n        reputation[_arbitrator] = 0; // Initialize reputation\\n        emit ArbitratorAdded(_arbitrator);\\n    }\\n\\n    // Add product by the seller\\n    function addProduct(string memory _itemName, uint256 _price) external OnlySellers {\\n        bytes32 id = keccak256(abi.encodePacked(address(msg.sender), _itemName));\\n        Product memory product = Product(id, _itemName, _price, address(msg.sender), true);\\n        products[id] = product;\\n        productNames[_itemName] = id;\\n        emit ProductAdded(id, _itemName, _price, msg.sender, true);\\n    }\\n\\n    // Buy product by the buyer\\n    function buyProduct(string memory _itemName, uint256 _claimTime, uint256 _expiryTime)\\n        external\\n        OnlyBuyers\\n        returns (bytes32)\\n    {\\n        require(_claimTime < _expiryTime, \\\"ClaimTime >= ExpiryTime\\\");\\n\\n        bytes32 _id = productNames[_itemName];\\n        Product memory product = products[_id];\\n        require(product.seller != address(0) && product.price != 0, \\\"Product doesn't exist\\\");\\n        require(product.onSale == true, \\\"Product is not on sale\\\");\\n\\n        // Increment nextEscrowId to ensure uniqueness\\n        bytes32 newEscrowId = keccak256(abi.encodePacked(msg.sender, block.number, nextEscrowId));\\n        nextEscrowId++;\\n\\n        // Initialize empty array for arbitrators\\n        address[] memory emptyArbitrators;\\n\\n        // Direct assignment to storage\\n        escrows[newEscrowId] = EscrowDetails({\\n            escrowId: newEscrowId,\\n            productId: _id,\\n            productName: product.itemName,\\n            productPrice: product.price,\\n            productSeller: product.seller,\\n            productBuyer: msg.sender,\\n            productArbitrators: emptyArbitrators,\\n            claimTime: block.timestamp + _claimTime,\\n            expiryTime: block.timestamp + _expiryTime,\\n            authorization: Authorization.Pending,\\n            bought: true\\n        });\\n\\n        // Safe token transfer\\n        token.safeTransferFrom(msg.sender, address(this), product.price);\\n\\n        // Emit the event\\n        emit ProductBought(newEscrowId, product.price, _claimTime, _expiryTime);\\n\\n        return newEscrowId; // Return the escrow ID to confirm\\n    }\\n\\n    // Seller claims the funds after a successful transaction\\n    function claimPayment(bytes32 escrowId) external nonReentrant {\\n        EscrowDetails storage escrow = escrows[escrowId];\\n\\n        require(escrow.productSeller == msg.sender, \\\"Not the seller of this product\\\");\\n        require(escrow.authorization == Authorization.Pending, \\\"Escrow is not in a claimable state\\\");\\n        require(block.timestamp >= escrow.claimTime, \\\"Claim time has not yet passed\\\");\\n        require(escrow.bought == true, \\\"Product has not been bought\\\");\\n\\n        // Mark the escrow as claimed\\n        escrow.authorization = Authorization.Claim;\\n\\n        // Transfer payment to seller\\n        uint256 paymentAmount = escrow.productPrice;\\n        require(token.transfer(escrow.productSeller, paymentAmount), \\\"Transfer to seller failed\\\");\\n\\n        // **Update seller's reputation** here after successful claim\\n        updateReputation(escrow.productSeller, true);\\n\\n        emit DisputeResolved(escrowId, escrow.productSeller, \\\"Seller claimed the payment\\\");\\n    }\\n\\n    // Dispute opened by either buyer or seller\\n    function openDispute(bytes32 escrowId) external nonReentrant{\\n        EscrowDetails storage escrow = escrows[escrowId];\\n        require(escrow.productBuyer == msg.sender || escrow.productSeller == msg.sender, \\\"Not your escrow\\\");\\n        require(escrow.authorization == Authorization.Pending, \\\"Escrow not in Pending state\\\");\\n\\n        escrow.authorization = Authorization.Disputed;\\n        escrows[escrowId] = escrow;\\n\\n        emit DisputeOpened(escrowId, msg.sender);\\n    }\\n\\n    // Arbitrators vote on the dispute\\n    function voteOnDispute(bytes32 escrowId, bool voteForBuyer) external OnlyArbitrators nonReentrant{\\n        EscrowDetails storage escrow = escrows[escrowId];\\n        ArbitrationVote storage vote = arbitrationVotes[escrowId];\\n\\n        require(escrow.authorization == Authorization.Disputed, \\\"Escrow is not disputed\\\");\\n        require(!vote.voted[msg.sender], \\\"You already voted\\\");\\n\\n        // Initialize vote if not already present\\n        if (!vote.resolved) {\\n            vote.voted[msg.sender] = true;\\n            escrow.productArbitrators.push(msg.sender);\\n\\n            if (voteForBuyer) {\\n                vote.votesForBuyer++;\\n            } else {\\n                vote.votesForSeller++;\\n            }\\n\\n            emit ArbitratorVoted(escrowId, msg.sender, voteForBuyer);\\n\\n            if (escrow.productArbitrators.length >= minVotesRequired) {\\n                resolveDispute(escrowId);\\n            }\\n        }\\n    }\\n\\n    // Internal function to check if the escrow has expired\\n    function checkEscrowExpiry(bytes32 escrowId) internal {\\n        EscrowDetails storage escrow = escrows[escrowId];\\n        require(block.timestamp >= escrow.expiryTime, \\\"Escrow has not yet expired\\\");\\n        require(escrow.authorization == Authorization.Pending, \\\"Escrow not in Pending state\\\");\\n\\n        // Automatically refund the buyer upon expiry\\n        refundToBuyer(escrowId);\\n    }\\n\\n    // Resolve the dispute based on majority vote, also check for expiry\\n    function resolveDispute(bytes32 escrowId) internal {\\n        ArbitrationVote storage vote = arbitrationVotes[escrowId];\\n        EscrowDetails storage escrow = escrows[escrowId];\\n\\n        require(!vote.resolved, \\\"Dispute already resolved\\\");\\n\\n        // Check if the escrow has expired, if so, refund the buyer\\n        if (block.timestamp >= escrow.expiryTime) {\\n            checkEscrowExpiry(escrowId);\\n            return; // Exit after expiry handling\\n        }\\n\\n        address winner;\\n        if (vote.votesForBuyer > vote.votesForSeller) {\\n            escrow.authorization = Authorization.Cancel; // Refund to buyer\\n            winner = escrow.productBuyer;\\n            refundToBuyer(escrowId);\\n        } else {\\n            escrow.authorization = Authorization.Claim; // Payment to seller\\n            winner = escrow.productSeller;\\n            transferToSeller(escrowId);\\n        }\\n\\n        vote.resolved = true;\\n        updateReputation(winner, true);\\n\\n        emit DisputeResolved(escrowId, winner, \\\"Dispute resolved\\\");\\n    }\\n\\n    // Refund product price to buyer\\n    function refundToBuyer(bytes32 escrowId) internal {\\n        EscrowDetails storage escrow = escrows[escrowId];\\n        uint256 refundAmount = escrow.productPrice;\\n        address buyer = escrow.productBuyer;\\n\\n        require(token.transfer(buyer, refundAmount), \\\"Refund failed\\\");\\n        emit DisputeResolved(escrowId, buyer, \\\"Refund issued to buyer\\\");\\n    }\\n\\n    // Transfer product price to seller\\n    function transferToSeller(bytes32 escrowId) internal {\\n        EscrowDetails storage escrow = escrows[escrowId];\\n        uint256 paymentAmount = escrow.productPrice;\\n        address seller = escrow.productSeller;\\n\\n        require(token.transfer(seller, paymentAmount), \\\"Transfer failed\\\");\\n    }\\n\\n    // Update reputation of users involved in the escrow\\n    function updateReputation(address user, bool positive) internal {\\n        if (positive) {\\n            reputation[user]++;\\n        } else {\\n            reputation[user]--;\\n        }\\n\\n        emit ReputationUpdated(user, reputation[user]);\\n    }\\n\\n    // Get the details of an escrow\\n    function getEscrowDetails(bytes32 escrowId) external view returns (EscrowDetails memory) {\\n        return escrows[escrowId];\\n    }\\n}\\n\",\"keccak256\":\"0xbb592cd57b0fcc8e0c5b9f9fcdfd1f80240269d8bf8839a7250d8f6fcde87c85\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1375,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1489,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)729"
      },
      {
        "astId": 1491,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1493,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "receiver",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 1495,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "nextEscrowId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1497,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "sellersCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1499,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "buyersCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1501,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "arbitratorsCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1504,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "minVotesRequired",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1567,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "sellers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1571,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "buyers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1575,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "arbitrators",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1580,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "products",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_struct(Product)1527_storage)"
      },
      {
        "astId": 1585,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "escrows",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_struct(EscrowDetails)1552_storage)"
      },
      {
        "astId": 1590,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "arbitrationVotes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_struct(ArbitrationVote)1563_storage)"
      },
      {
        "astId": 1594,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "productNames",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_string_memory_ptr,t_bytes32)"
      },
      {
        "astId": 1598,
        "contract": "contracts/TrustBazaar.sol:TrustBazaar",
        "label": "reputation",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_int256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)729": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Authorization)1509": {
        "encoding": "inplace",
        "label": "enum TrustBazaar.Authorization",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(ArbitrationVote)1563_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TrustBazaar.ArbitrationVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ArbitrationVote)1563_storage"
      },
      "t_mapping(t_bytes32,t_struct(EscrowDetails)1552_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TrustBazaar.EscrowDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(EscrowDetails)1552_storage"
      },
      "t_mapping(t_bytes32,t_struct(Product)1527_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TrustBazaar.Product)",
        "numberOfBytes": "32",
        "value": "t_struct(Product)1527_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ArbitrationVote)1563_storage": {
        "encoding": "inplace",
        "label": "struct TrustBazaar.ArbitrationVote",
        "members": [
          {
            "astId": 1554,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "votesForBuyer",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1556,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "votesForSeller",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1560,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "voted",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1562,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "resolved",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(EscrowDetails)1552_storage": {
        "encoding": "inplace",
        "label": "struct TrustBazaar.EscrowDetails",
        "members": [
          {
            "astId": 1529,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "escrowId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1531,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "productId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1533,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "productName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1535,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "productPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1537,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "productSeller",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1539,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "productBuyer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1542,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "productArbitrators",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1544,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "claimTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1546,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "expiryTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1549,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "authorization",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(Authorization)1509"
          },
          {
            "astId": 1551,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "bought",
            "offset": 1,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Product)1527_storage": {
        "encoding": "inplace",
        "label": "struct TrustBazaar.Product",
        "members": [
          {
            "astId": 1518,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1520,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "itemName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1522,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1524,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "seller",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1526,
            "contract": "contracts/TrustBazaar.sol:TrustBazaar",
            "label": "onSale",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}